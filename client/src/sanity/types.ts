/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type FeaturedProjects = {
  _id: string;
  _type: "featuredProjects";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  projects?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  projectName?: string;
  category?: "films" | "editorial" | "advertising" | "personal";
  date?: string;
  coverMedia?: Array<
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        media?: unknown;
        _type: "file";
        _key: string;
      }
  >;
  instagramLink?: string;
  gallery?: Array<
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        media?: unknown;
        _type: "file";
        _key: string;
      }
  >;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | FeaturedProjects
  | Project
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: FETCH_FEATURED_PROJECTS
// Query: *[_type == "featuredProjects"][0] {        projects[]->{          _id,          projectName,          category,          coverMedia[0] {            ...,            asset->          },          instagramLink,          date        }      }
export type FETCH_FEATURED_PROJECTSResult = {
  projects: Array<{
    _id: string;
    projectName: string | null;
    category: "advertising" | "editorial" | "films" | "personal" | null;
    coverMedia:
      | {
          asset: {
            _id: string;
            _type: "sanity.fileAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            source?: SanityAssetSourceData;
          } | null;
          media?: unknown;
          _type: "file";
          _key: string;
        }
      | {
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
          _key: string;
        }
      | null;
    instagramLink: string | null;
    date: string | null;
  }> | null;
} | null;
// Variable: FETCH_PROJECT
// Query: *[_type == "project" && _id == $projectId][0]{    ...,    gallery[]{    _key,    _type,    alt,    asset->{       _id,      url,      playbackId,      metadata {        lqip,        dimensions        }        }  }  }
export type FETCH_PROJECTResult = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  projectName?: string;
  category?: "advertising" | "editorial" | "films" | "personal";
  date?: string;
  coverMedia?: Array<
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        media?: unknown;
        _type: "file";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }
  >;
  instagramLink?: string;
  gallery: Array<
    | {
        _key: string;
        _type: "file";
        alt: null;
        asset: {
          _id: string;
          url: string | null;
          playbackId: null;
          metadata: null;
        } | null;
      }
    | {
        _key: string;
        _type: "image";
        alt: null;
        asset: {
          _id: string;
          url: string | null;
          playbackId: null;
          metadata: {
            lqip: string | null;
            dimensions: SanityImageDimensions | null;
          } | null;
        } | null;
      }
  > | null;
} | null;
// Variable: FETCH_CATEGORY_PROJECTS
// Query: *[_type == "project" && category == $category]{      _id,      projectName,      instagramLink,      date,      coverMedia[0] {        ...,        asset->      },  }
export type FETCH_CATEGORY_PROJECTSResult = Array<{
  _id: string;
  projectName: string | null;
  instagramLink: string | null;
  date: string | null;
  coverMedia:
    | {
        asset: {
          _id: string;
          _type: "sanity.fileAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          source?: SanityAssetSourceData;
        } | null;
        media?: unknown;
        _type: "file";
        _key: string;
      }
    | {
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }
    | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "featuredProjects"][0] {\n        projects[]->{\n          _id,\n          projectName,\n          category,\n          coverMedia[0] {\n            ...,\n            asset->\n          },\n          instagramLink,\n          date\n        }\n      }\n': FETCH_FEATURED_PROJECTSResult;
    '*[_type == "project" && _id == $projectId][0]{\n    ...,\n    gallery[]{\n    _key,\n    _type,\n    alt,\n    asset->{ \n      _id,\n      url,\n      playbackId,\n      metadata {\n        lqip,\n        dimensions  \n      }    \n    }\n  }\n  }': FETCH_PROJECTResult;
    '*[_type == "project" && category == $category]{\n      _id,\n      projectName,\n      instagramLink,\n      date,\n      coverMedia[0] {\n        ...,\n        asset->\n      },\n  }': FETCH_CATEGORY_PROJECTSResult;
  }
}
